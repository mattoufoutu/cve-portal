# -*- coding: utf-8 -*-

import ConfigParser
import imp
from functools import wraps

import gnupg
import redis as redisdb
from flask import render_template, abort
from flask.ext.login import current_user
from flask.ext.mail import Message, Mail
from flask.ext.pymongo import PyMongo

import models
from issue_tracker import DummyTracker


def send_email(to, subject, template, **kwargs):
    msg = Message(subject, recipients=[to], sender=cfg.get('SMTP', 'sender'))
    msg.body = render_template(template + '.txt', **kwargs)
    msg.html = render_template(template + '.html', **kwargs)
    return mail.send(msg)


def permission_required(permission):
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            if not current_user.can(permission):
                abort(403)
            return f(*args, **kwargs)

        return decorated_function

    return decorator


def admin_required(f):
    return permission_required(models.Permission.ADMINISTER)(f)


configfile = 'config/config.cfg'
cfg = ConfigParser.ConfigParser()
cfg.read(configfile)
gpg = gnupg.GPG(homedir=cfg.get('GPG', 'directory'))
redis = redisdb.StrictRedis(host=cfg.get('REDIS', 'host'),
                            port=cfg.get('REDIS', 'port'),
                            db=cfg.get('REDIS', 'db'))
mongo = PyMongo()
mail = Mail()

# Issue tracker #
issues_enabled = cfg.getboolean('IssueTracker', 'enabled')
if issues_enabled:
    tracker_cls_path = cfg.get('IssueTracker', 'tracker_class')
    tracker_kwargs = {}
    for opt in cfg.options('IssueTracker'):
        if opt != 'tracker_class':
            tracker_kwargs[opt] = cfg.get('IssueTracker', opt)
    mod_path = None
    tracker_mod = None
    for mod_name in tracker_cls_path.split('.')[:-1]:
        f, pathname, descr = imp.find_module(mod_name, mod_path)
        tracker_mod = imp.load_module(mod_name, f, pathname, descr)
        if hasattr(tracker_mod, '__path__'):
            mod_path = tracker_mod.__path__
    tracker_cls = getattr(tracker_mod, tracker_cls_path.split('.')[-1])
    tracker = tracker_cls(**tracker_kwargs)
else:
    tracker = DummyTracker()
