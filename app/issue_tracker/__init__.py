# -*- coding: utf-8 -*-


class IssueTrackerError(Exception):
    pass


class IssueTrackerConfigError(IssueTrackerError):
    pass


class IssueTrackerProcessingError(IssueTrackerError):
    pass


class Issue(object):
    """
    Dummy class to hold information about an issue.
    """
    _cpe_fields = ['vendor', 'product', 'version']

    def __init__(self, tracker, issue_id, url, cpe, cve, cvss):
        self.tracker = tracker
        self.id = issue_id
        self.url = url
        self.cpe = cpe
        self.cve = cve
        self.cvss = cvss
        self._parse_cpe()

    def _parse_cpe(self):
        for name, value in zip(self._cpe_fields, self.cpe.split(':')):
            if value == '*':
                value = ''
            setattr(self, name, value)


class IssueTracker(object):
    """
    Base class for implementing access to an issue tracker and allow opening/closing issues.
    Methods and properties required to be implemented by subclasses:
    - issues (property)
    - open_issue (method)
    For details about what args they take and what they do return, see their signatures below.
    """
    required_kwargs = []

    def __init__(self, **kwargs):
        self._check_kwargs(**kwargs)

    def _check_kwargs(self, **kwargs):
        for k in self.required_kwargs:
            if k not in kwargs:
                raise IssueTrackerConfigError('missing configuration variable: %s' % k)

    @property
    def issues(self):
        """
        Property to access the complete issues list (opened and closed).


        :returns all the issues available on the issue tracker
        :rtype list/tuple/generator
        """
        raise NotImplementedError

    def open_issue(self, notification, cve):
        """
        Create a new issue and register it on the tracker.

        :param notification: the notification which raised the issue
        :type notification: models.Notification
        :returns object holding newly created issue information
        :rtype: issue_tracker.Issue
        """
        raise NotImplementedError

